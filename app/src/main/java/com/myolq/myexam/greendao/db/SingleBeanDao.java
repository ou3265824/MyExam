package com.myolq.myexam.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.myolq.myexam.greendao.bean.SingleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "single".
*/
public class SingleBeanDao extends AbstractDao<SingleBean, Long> {

    public static final String TABLENAME = "single";

    /**
     * Properties of entity SingleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SingleId = new Property(0, Long.class, "singleId", true, "_id");
        public final static Property TitleId = new Property(1, Long.class, "titleId", false, "TITLE_ID");
        public final static Property TitleName = new Property(2, String.class, "titleName", false, "TITLE_NAME");
        public final static Property OptionA = new Property(3, String.class, "optionA", false, "OPTION_A");
        public final static Property OptionB = new Property(4, String.class, "optionB", false, "OPTION_B");
        public final static Property OptionC = new Property(5, String.class, "optionC", false, "OPTION_C");
        public final static Property OptionD = new Property(6, String.class, "optionD", false, "OPTION_D");
        public final static Property Result = new Property(7, String.class, "result", false, "RESULT");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property UpdateData = new Property(9, String.class, "updateData", false, "UPDATE_DATA");
    }


    public SingleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SingleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"single\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: singleId
                "\"TITLE_ID\" INTEGER," + // 1: titleId
                "\"TITLE_NAME\" TEXT," + // 2: titleName
                "\"OPTION_A\" TEXT," + // 3: optionA
                "\"OPTION_B\" TEXT," + // 4: optionB
                "\"OPTION_C\" TEXT," + // 5: optionC
                "\"OPTION_D\" TEXT," + // 6: optionD
                "\"RESULT\" TEXT," + // 7: result
                "\"TYPE\" TEXT," + // 8: type
                "\"UPDATE_DATA\" TEXT);"); // 9: updateData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"single\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SingleBean entity) {
        stmt.clearBindings();
 
        Long singleId = entity.getSingleId();
        if (singleId != null) {
            stmt.bindLong(1, singleId);
        }
 
        Long titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(2, titleId);
        }
 
        String titleName = entity.getTitleName();
        if (titleName != null) {
            stmt.bindString(3, titleName);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(4, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(5, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(6, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(7, optionD);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String updateData = entity.getUpdateData();
        if (updateData != null) {
            stmt.bindString(10, updateData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SingleBean entity) {
        stmt.clearBindings();
 
        Long singleId = entity.getSingleId();
        if (singleId != null) {
            stmt.bindLong(1, singleId);
        }
 
        Long titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(2, titleId);
        }
 
        String titleName = entity.getTitleName();
        if (titleName != null) {
            stmt.bindString(3, titleName);
        }
 
        String optionA = entity.getOptionA();
        if (optionA != null) {
            stmt.bindString(4, optionA);
        }
 
        String optionB = entity.getOptionB();
        if (optionB != null) {
            stmt.bindString(5, optionB);
        }
 
        String optionC = entity.getOptionC();
        if (optionC != null) {
            stmt.bindString(6, optionC);
        }
 
        String optionD = entity.getOptionD();
        if (optionD != null) {
            stmt.bindString(7, optionD);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String updateData = entity.getUpdateData();
        if (updateData != null) {
            stmt.bindString(10, updateData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SingleBean readEntity(Cursor cursor, int offset) {
        SingleBean entity = new SingleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // singleId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // titleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // optionA
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // optionB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // optionC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // optionD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // result
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // updateData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SingleBean entity, int offset) {
        entity.setSingleId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOptionA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOptionB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptionC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOptionD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateData(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SingleBean entity, long rowId) {
        entity.setSingleId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SingleBean entity) {
        if(entity != null) {
            return entity.getSingleId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SingleBean entity) {
        return entity.getSingleId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
